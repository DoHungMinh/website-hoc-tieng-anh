import React, { useState } from 'react';
import CoursesPage from './CoursesPage';
import CourseDetail from './CourseDetail';
import { courseAPI, Course } from '../services/courseAPI';

// Import DetailCourse type t·ª´ CourseDetail
type DetailCourse = {
  id: string;
  title: string;
  level: 'A1' | 'A2' | 'B1' | 'B2' | 'C1' | 'C2';
  price: number;
  originalPrice?: number;
  duration: string;
  lessonsCount: number;
  studentsCount: number;
  rating: number;
  description: string;
  features: string[];
  curriculum: {
    module: string;
    lessons: string[];
  }[];
  instructor: {
    name: string;
    title: string;
    experience: string;
    avatar: string;
  };
  whatYouLearn: string[];
  requirements: string[];
  isPopular?: boolean;
  vocabulary?: Array<{
    id: string;
    word: string;
    pronunciation?: string;
    meaning: string;
    example?: string;
  }>;
  grammar?: Array<{
    id: string;
    rule: string;
    structure?: string;
    explanation: string;
    example: string;
  }>;
};

type ViewType = 'main' | 'vocabulary' | 'grammar' | 'detail';

interface CourseAppProps {
  onBack?: () => void;
}

const CourseApp: React.FC<CourseAppProps> = ({ onBack }) => {
  const [currentView, setCurrentView] = useState<ViewType>('main');
  const [selectedCourse, setSelectedCourse] = useState<Course | null>(null);
  const [purchasedCourses, setPurchasedCourses] = useState<Set<string>>(new Set()); // Track purchased courses

  const handleCourseTypeSelect = (type: 'vocabulary' | 'grammar') => {
    setCurrentView(type);
  };

  const handleCourseSelect = async (courseId: string) => {
    try {
      const response = await courseAPI.getPublicCourseById(courseId);
      if (response.success) {
        setSelectedCourse(response.data);
        setCurrentView('detail');
      }
    } catch (error) {
      console.error('Error loading course details:', error);
      alert('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin kh√≥a h·ªçc');
    }
  };

  const handleBack = () => {
    if (currentView === 'detail') {
      setCurrentView(selectedCourse?.type || 'main');
      setSelectedCourse(null);
    } else if (currentView === 'main') {
      onBack?.(); // Back to homepage
    } else {
      setCurrentView('main');
    }
  };

  const handleEnroll = async (courseId: string) => {
    // Simulate purchase confirmation
    const confirmPurchase = window.confirm(
      `B·∫°n c√≥ mu·ªën mua kh√≥a h·ªçc n√†y v·ªõi gi√° ${selectedCourse?.price?.toLocaleString('vi-VN')}ƒë?\n\n` +
      `Sau khi mua th√†nh c√¥ng, b·∫°n s·∫Ω c√≥ th·ªÉ truy c·∫≠p to√†n b·ªô n·ªôi dung kh√≥a h·ªçc.\n\n` +
      `(ƒê√¢y l√† demo - kh√¥ng th·ª±c s·ª± thanh to√°n)`
    );
    
    if (confirmPurchase) {
      // Simulate successful purchase
      setPurchasedCourses(prev => new Set(prev).add(courseId));
      alert('üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ mua kh√≥a h·ªçc th√†nh c√¥ng!\n\nB√¢y gi·ªù b·∫°n c√≥ th·ªÉ truy c·∫≠p to√†n b·ªô n·ªôi dung kh√≥a h·ªçc.');
    }
    // TODO: Implement real payment flow
  };

  // Generate content based on course level and type
  const generateWhatYouLearn = (level: string, type: string): string[] => {
    const baseSkills = {
      vocabulary: {
        'A1': [
          'H·ªçc 200+ t·ª´ v·ª±ng c∆° b·∫£n th∆∞·ªùng ng√†y',
          'Ph√°t √¢m ch√≠nh x√°c c√°c t·ª´ v·ª±ng c∆° b·∫£n',
          'S·ª≠ d·ª•ng t·ª´ v·ª±ng trong giao ti·∫øp h√†ng ng√†y',
          'Nh·∫≠n bi·∫øt v√† hi·ªÉu t·ª´ v·ª±ng qua ng·ªØ c·∫£nh ƒë∆°n gi·∫£n'
        ],
        'A2': [
          'M·ªü r·ªông v·ªën t·ª´ v·ª±ng l√™n 500+ t·ª´',
          'S·ª≠ d·ª•ng t·ª´ v·ª±ng ƒë·ªÉ m√¥ t·∫£ ho·∫°t ƒë·ªông h√†ng ng√†y',
          'K·∫øt h·ª£p t·ª´ v·ª±ng ƒë·ªÉ t·∫°o c√¢u ph·ª©c t·∫°p h∆°n',
          'Hi·ªÉu nghƒ©a t·ª´ v·ª±ng qua ng·ªØ c·∫£nh'
        ],
        'B1': [
          'N·∫Øm v·ªØng 1000+ t·ª´ v·ª±ng ƒëa d·∫°ng ch·ªß ƒë·ªÅ',
          'S·ª≠ d·ª•ng t·ª´ v·ª±ng chuy√™n ng√†nh c∆° b·∫£n',
          'Ph√¢n bi·ªát s·∫Øc th√°i nghƒ©a c·ªßa t·ª´ v·ª±ng',
          '√Åp d·ª•ng t·ª´ v·ª±ng trong writing v√† speaking'
        ],
        'B2': [
          'L√†m ch·ªß 1500+ t·ª´ v·ª±ng n√¢ng cao',
          'S·ª≠ d·ª•ng idioms v√† phrases th√¥ng d·ª•ng',
          'Hi·ªÉu t·ª´ v·ª±ng academic v√† formal',
          'V·∫≠n d·ª•ng t·ª´ v·ª±ng ƒë·ªÉ di·ªÖn ƒë·∫°t √Ω t∆∞·ªüng ph·ª©c t·∫°p'
        ],
        'C1': [
          'Th√†nh th·∫°o 2000+ t·ª´ v·ª±ng chuy√™n s√¢u',
          'S·ª≠ d·ª•ng t·ª´ v·ª±ng academic m·ªôt c√°ch t·ª± nhi√™n',
          'Hi·ªÉu v√† d√πng collocation ch√≠nh x√°c',
          'Di·ªÖn ƒë·∫°t √Ω t∆∞·ªüng v·ªõi t·ª´ v·ª±ng tinh t·∫ø v√† ch√≠nh x√°c'
        ],
        'C2': [
          'N·∫Øm v·ªØng 3000+ t·ª´ v·ª±ng ƒëa d·∫°ng lƒ©nh v·ª±c',
          'S·ª≠ d·ª•ng t·ª´ v·ª±ng nh∆∞ ng∆∞·ªùi b·∫£n ng·ªØ',
          'Hi·ªÉu v√† v·∫≠n d·ª•ng t·ª´ v·ª±ng chuy√™n ng√†nh s√¢u',
          'Th·ªÉ hi·ªán s·ª± tinh t·∫ø trong l·ª±a ch·ªçn t·ª´ ng·ªØ'
        ]
      },
      grammar: {
        'A1': [
          'S·ª≠ d·ª•ng th√¨ hi·ªán t·∫°i ƒë∆°n v√† hi·ªán t·∫°i ti·∫øp di·ªÖn',
          'T·∫°o c√¢u kh·∫≥ng ƒë·ªãnh, ph·ªß ƒë·ªãnh v√† nghi v·∫•n c∆° b·∫£n',
          'S·ª≠ d·ª•ng ƒë·ªông t·ª´ "to be" v√† "have" ch√≠nh x√°c',
          'Hi·ªÉu c·∫•u tr√∫c c√¢u ƒë∆°n gi·∫£n'
        ],
        'A2': [
          'N·∫Øm v·ªØng c√°c th√¨ qu√° kh·ª© ƒë∆°n v√† t∆∞∆°ng lai ƒë∆°n',
          'S·ª≠ d·ª•ng modal verbs c∆° b·∫£n (can, must, should)',
          'T·∫°o c√¢u gh√©p ƒë∆°n gi·∫£n v·ªõi "and", "but", "or"',
          'Hi·ªÉu v√† d√πng prepositions th√¥ng d·ª•ng'
        ],
        'B1': [
          'Th√†nh th·∫°o perfect tenses (hi·ªán t·∫°i ho√†n th√†nh)',
          'S·ª≠ d·ª•ng passive voice trong c√°c t√¨nh hu·ªëng c∆° b·∫£n',
          'T·∫°o c√¢u ph·ª©c v·ªõi c√°c m·ªánh ƒë·ªÅ ph·ª•',
          'Hi·ªÉu v√† d√πng conditional sentences lo·∫°i 1'
        ],
        'B2': [
          'L√†m ch·ªß t·∫•t c·∫£ c√°c th√¨ ti·∫øng Anh',
          'S·ª≠ d·ª•ng reported speech th√†nh th·∫°o',
          'T·∫°o c√¢u ph·ª©c t·∫°p v·ªõi nhi·ªÅu m·ªánh ƒë·ªÅ',
          'Hi·ªÉu v√† d√πng conditional sentences lo·∫°i 2, 3'
        ],
        'C1': [
          'S·ª≠ d·ª•ng c·∫•u tr√∫c ng·ªØ ph√°p n√¢ng cao m·ªôt c√°ch t·ª± nhi√™n',
          'Hi·ªÉu v√† v·∫≠n d·ª•ng inversion, emphasis structures',
          'S·ª≠ d·ª•ng subjunctive mood ch√≠nh x√°c',
          'T·∫°o vƒÉn b·∫£n v·ªõi c·∫•u tr√∫c ng·ªØ ph√°p ƒëa d·∫°ng'
        ],
        'C2': [
          'Th√†nh th·∫°o t·∫•t c·∫£ c·∫•u tr√∫c ng·ªØ ph√°p ti·∫øng Anh',
          'S·ª≠ d·ª•ng ng·ªØ ph√°p nh∆∞ ng∆∞·ªùi b·∫£n ng·ªØ',
          'Hi·ªÉu v√† v·∫≠n d·ª•ng c·∫•u tr√∫c formal v√† informal',
          'Th·ªÉ hi·ªán s·ª± tinh t·∫ø trong c√°ch di·ªÖn ƒë·∫°t'
        ]
      }
    };

    return baseSkills[type as keyof typeof baseSkills]?.[level as keyof typeof baseSkills.vocabulary] || [
      'N√¢ng cao k·ªπ nƒÉng ti·∫øng Anh c·ªßa b·∫°n',
      'H·ªçc t·ª´ v·ª±ng v√† ng·ªØ ph√°p th·ª±c t·∫ø',
      '√Åp d·ª•ng ki·∫øn th·ª©c v√†o giao ti·∫øp',
      'Chu·∫©n b·ªã cho c√°c k·ª≥ thi qu·ªëc t·∫ø'
    ];
  };

  const generateCurriculum = (level: string, type: string): Array<{module: string; lessons: string[]}> => {
    const curriculumTemplates = {
      vocabulary: {
        'A1': [
          { module: 'T·ª´ v·ª±ng c∆° b·∫£n', lessons: ['Gia ƒë√¨nh v√† b·∫°n b√®', 'M√†u s·∫Øc v√† s·ªë ƒë·∫øm', 'Th·ª±c ph·∫©m v√† ƒë·ªì u·ªëng', 'Qu·∫ßn √°o v√† ph·ª• ki·ªán'] },
          { module: 'Ho·∫°t ƒë·ªông h√†ng ng√†y', lessons: ['Th·ªùi gian v√† l·ªãch tr√¨nh', 'Giao th√¥ng v√† di chuy·ªÉn', 'Mua s·∫Øm c∆° b·∫£n', 'S·ªü th√≠ch v√† gi·∫£i tr√≠'] }
        ],
        'A2': [
          { module: 'M·ªü r·ªông t·ª´ v·ª±ng', lessons: ['C√¥ng vi·ªác v√† ngh·ªÅ nghi·ªáp', 'S·ª©c kh·ªèe v√† c∆° th·ªÉ', 'Th·ªùi ti·∫øt v√† m√¥i tr∆∞·ªùng', 'Gi√°o d·ª•c v√† h·ªçc t·∫≠p'] },
          { module: 'Giao ti·∫øp x√£ h·ªôi', lessons: ['M·ªùi g·ªçi v√† t·ª´ ch·ªëi', '√ù ki·∫øn v√† c·∫£m x√∫c', 'So s√°nh v√† ƒë·ªëi chi·∫øu', 'K·∫ø ho·∫°ch t∆∞∆°ng lai'] }
        ],
        'B1': [
          { module: 'T·ª´ v·ª±ng ƒëa d·∫°ng', lessons: ['C√¥ng ngh·ªá v√† internet', 'Du l·ªãch v√† vƒÉn h√≥a', 'Kinh doanh c∆° b·∫£n', 'M√¥i tr∆∞·ªùng v√† b·∫£o v·ªá'] },
          { module: 'K·ªπ nƒÉng giao ti·∫øp', lessons: ['Thuy·∫øt tr√¨nh ƒë∆°n gi·∫£n', 'Th·∫£o lu·∫≠n nh√≥m', 'Vi·∫øt email ch√≠nh th·ª©c', 'Ph·ªèng v·∫•n c∆° b·∫£n'] }
        ],
        'B2': [
          { module: 'T·ª´ v·ª±ng n√¢ng cao', lessons: ['Khoa h·ªçc v√† k·ªπ thu·∫≠t', 'Ch√≠nh tr·ªã v√† x√£ h·ªôi', 'Ngh·ªá thu·∫≠t v√† vƒÉn h√≥a', 'Kinh t·∫ø v√† t√†i ch√≠nh'] },
          { module: '·ª®ng d·ª•ng th·ª±c t·∫ø', lessons: ['Presentation chuy√™n nghi·ªáp', 'Negotiation skills', 'Academic writing', 'Critical thinking'] }
        ],
        'C1': [
          { module: 'T·ª´ v·ª±ng chuy√™n s√¢u', lessons: ['Academic vocabulary', 'Professional terminology', 'Idioms v√† expressions', 'Formal vs informal language'] },
          { module: 'Th√†nh th·∫°o giao ti·∫øp', lessons: ['Advanced presentation', 'Debate v√† discussion', 'Research writing', 'Cross-cultural communication'] }
        ],
        'C2': [
          { module: 'T·ª´ v·ª±ng b·∫≠c th·∫ßy', lessons: ['Specialized vocabulary', 'Nuanced expressions', 'Literary language', 'Regional variations'] },
          { module: 'Perfection level', lessons: ['Native-like fluency', 'Advanced rhetoric', 'Professional mastery', 'Cultural insights'] }
        ]
      },
      grammar: {
        'A1': [
          { module: 'Ng·ªØ ph√°p c∆° b·∫£n', lessons: ['Th√¨ hi·ªán t·∫°i ƒë∆°n', 'Th√¨ hi·ªán t·∫°i ti·∫øp di·ªÖn', 'ƒê·ªông t·ª´ "to be"', 'C√¢u h·ªèi v·ªõi "Wh-"'] },
          { module: 'C·∫•u tr√∫c c√¢u', lessons: ['C√¢u kh·∫≥ng ƒë·ªãnh', 'C√¢u ph·ªß ƒë·ªãnh', 'C√¢u nghi v·∫•n', 'Gi·ªõi t·ª´ c∆° b·∫£n'] }
        ],
        'A2': [
          { module: 'Th√¨ ƒë·ªông t·ª´', lessons: ['Qu√° kh·ª© ƒë∆°n', 'T∆∞∆°ng lai ƒë∆°n', 'Th√¨ hi·ªán t·∫°i ho√†n th√†nh', 'So s√°nh h∆°n v√† nh·∫•t'] },
          { module: 'Modal verbs', lessons: ['Can v√† could', 'Must v√† have to', 'Should v√† ought to', 'May v√† might'] }
        ],
        'B1': [
          { module: 'Ng·ªØ ph√°p trung c·∫•p', lessons: ['Passive voice', 'Reported speech', 'Conditional type 1', 'Relative clauses'] },
          { module: 'C·∫•u tr√∫c n√¢ng cao', lessons: ['Gerunds v√† infinitives', 'Phrasal verbs', 'Linking words', 'Tenses review'] }
        ],
        'B2': [
          { module: 'Ng·ªØ ph√°p cao c·∫•p', lessons: ['Conditional type 2&3', 'Mixed conditionals', 'Advanced passive', 'Subjunctive mood'] },
          { module: 'C·∫•u tr√∫c ph·ª©c t·∫°p', lessons: ['Inversion', 'Cleft sentences', 'Participle clauses', 'Advanced linking'] }
        ],
        'C1': [
          { module: 'Ng·ªØ ph√°p chuy√™n s√¢u', lessons: ['Advanced tenses', 'Complex conditionals', 'Emphasis structures', 'Academic grammar'] },
          { module: 'VƒÉn phong cao c·∫•p', lessons: ['Formal structures', 'Register variation', 'Discourse markers', 'Stylistic devices'] }
        ],
        'C2': [
          { module: 'Ng·ªØ ph√°p b·∫≠c th·∫ßy', lessons: ['Sophisticated structures', 'Nuanced grammar', 'Literary devices', 'Native-like usage'] },
          { module: 'Ho√†n thi·ªán k·ªπ nƒÉng', lessons: ['Error analysis', 'Style adaptation', 'Advanced rhetoric', 'Professional mastery'] }
        ]
      }
    };

    return curriculumTemplates[type as keyof typeof curriculumTemplates]?.[level as keyof typeof curriculumTemplates.vocabulary] || [
      { module: 'Module 1', lessons: ['Lesson 1', 'Lesson 2', 'Lesson 3'] },
      { module: 'Module 2', lessons: ['Lesson 4', 'Lesson 5', 'Lesson 6'] }
    ];
  };

  const generateRequirements = (level: string): string[] => {
    const requirementsByLevel = {
      'A1': [
        'Kh√¥ng c·∫ßn ki·∫øn th·ª©c ti·∫øng Anh tr∆∞·ªõc ƒë√≥',
        'M√°y t√≠nh ho·∫∑c ƒëi·ªán tho·∫°i c√≥ k·∫øt n·ªëi internet',
        'ƒê·ªông l·ª±c h·ªçc t·∫≠p v√† luy·ªán t·∫≠p th∆∞·ªùng xuy√™n',
        'D√†nh √≠t nh·∫•t 30 ph√∫t/ng√†y ƒë·ªÉ h·ªçc'
      ],
      'A2': [
        'C√≥ ki·∫øn th·ª©c ti·∫øng Anh c∆° b·∫£n (A1)',
        'Hi·ªÉu ƒë∆∞·ª£c c√°c c√¢u ƒë∆°n gi·∫£n',
        'M√°y t√≠nh ho·∫∑c ƒëi·ªán tho·∫°i c√≥ k·∫øt n·ªëi internet',
        'D√†nh 45 ph√∫t/ng√†y ƒë·ªÉ h·ªçc v√† luy·ªán t·∫≠p'
      ],
      'B1': [
        'ƒê√£ ho√†n th√†nh tr√¨nh ƒë·ªô A2 ho·∫∑c t∆∞∆°ng ƒë∆∞∆°ng',
        'C√≥ th·ªÉ giao ti·∫øp c∆° b·∫£n b·∫±ng ti·∫øng Anh',
        'M√°y t√≠nh v·ªõi tr√¨nh duy·ªát web hi·ªán ƒë·∫°i',
        'D√†nh 1 gi·ªù/ng√†y ƒë·ªÉ h·ªçc v√† th·ª±c h√†nh'
      ],
      'B2': [
        'Tr√¨nh ƒë·ªô B1 ho·∫∑c t∆∞∆°ng ƒë∆∞∆°ng',
        'C√≥ th·ªÉ hi·ªÉu vƒÉn b·∫£n ti·∫øng Anh trung b√¨nh',
        'M√°y t√≠nh/laptop ƒë·ªÉ l√†m b√†i t·∫≠p',
        'Cam k·∫øt h·ªçc √≠t nh·∫•t 1.5 gi·ªù/ng√†y'
      ],
      'C1': [
        'ƒê√£ ƒë·∫°t tr√¨nh ƒë·ªô B2 ti·∫øng Anh',
        'C√≥ th·ªÉ giao ti·∫øp th√†nh th·∫°o trong h·∫ßu h·∫øt t√¨nh hu·ªëng',
        'M√°y t√≠nh v·ªõi c√°c ph·∫ßn m·ªÅm h·ªó tr·ª£ h·ªçc t·∫≠p',
        'D√†nh 2 gi·ªù/ng√†y cho vi·ªác h·ªçc v√† nghi√™n c·ª©u'
      ],
      'C2': [
        'Tr√¨nh ƒë·ªô C1 ho·∫∑c g·∫ßn ƒë·∫°t tr√¨nh ƒë·ªô th√†nh th·∫°o',
        'C√≥ th·ªÉ hi·ªÉu h·∫ßu h·∫øt vƒÉn b·∫£n ph·ª©c t·∫°p',
        'M√°y t√≠nh v·ªõi internet t·ªëc ƒë·ªô cao',
        'Cam k·∫øt h·ªçc t·∫≠p nghi√™m t√∫c √≠t nh·∫•t 2-3 gi·ªù/ng√†y'
      ]
    };

    return requirementsByLevel[level as keyof typeof requirementsByLevel] || [
      'C√≥ ƒë·ªông l·ª±c h·ªçc t·∫≠p',
      'M√°y t√≠nh c√≥ k·∫øt n·ªëi internet',
      'Th·ªùi gian h·ªçc t·∫≠p th∆∞·ªùng xuy√™n'
    ];
  };

  // Convert API Course to CourseDetail DetailCourse format
  const convertToDetailCourse = (apiCourse: Course): DetailCourse => {
    return {
      id: apiCourse._id!,
      title: apiCourse.title,
      level: apiCourse.level,
      price: apiCourse.price,
      originalPrice: apiCourse.originalPrice,
      duration: apiCourse.duration,
      lessonsCount: apiCourse.lessonsCount,
      studentsCount: apiCourse.studentsCount,
      rating: 4.8, // Default rating since not in API
      description: apiCourse.description,
      features: apiCourse.benefits || [],
      curriculum: generateCurriculum(apiCourse.level, apiCourse.type),
      instructor: {
        name: apiCourse.instructor,
        title: 'Gi√°o vi√™n chuy√™n ng√†nh',
        experience: '5+ nƒÉm kinh nghi·ªám',
        avatar: '/instructor-avatar.jpg'
      },
      whatYouLearn: generateWhatYouLearn(apiCourse.level, apiCourse.type),
      requirements: generateRequirements(apiCourse.level),
      isPopular: false,
      vocabulary: apiCourse.vocabulary || [],
      grammar: apiCourse.grammar || []
    };
  };

  // Main courses page
  if (currentView === 'main') {
    return (
      <CoursesPage 
        onCourseTypeSelect={handleCourseTypeSelect}
        onBack={handleBack}
      />
    );
  }

  // Course list by type
  if (currentView === 'vocabulary' || currentView === 'grammar') {
    return (
      <CoursesPage 
        selectedType={currentView}
        onCourseTypeSelect={handleCourseTypeSelect}
        onCourseSelect={handleCourseSelect}
        onBack={handleBack}
      />
    );
  }

  // Course detail page
  if (currentView === 'detail' && selectedCourse) {
    return (
      <CourseDetail 
        course={convertToDetailCourse(selectedCourse)}
        onBack={handleBack}
        onEnroll={handleEnroll}
        isPurchased={purchasedCourses.has(selectedCourse._id || '')}
      />
    );
  }

  return null;
};

export default CourseApp;
