/**
 * PayOS Controller
 * X·ª≠ l√Ω c√°c API endpoints cho PayOS payment
 */

const payOSService = require('./payos-service');

/**
 * T·∫°o payment link cho kh√≥a h·ªçc
 * POST /api/payos/create-payment
 */
const createPayment = async (req, res) => {
  try {
    const { courseId } = req.body;
    const userId = req.user?.id; // T·ª´ auth middleware
    const userEmail = req.user?.email;

    console.log('üìù T·∫°o payment request:', { courseId, userId, userEmail });

    // Validate input
    if (!courseId) {
      return res.status(400).json({
        success: false,
        message: 'courseId l√† b·∫Øt bu·ªôc'
      });
    }

    if (!userId || !userEmail) {
      return res.status(401).json({
        success: false,
        message: 'Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p'
      });
    }

    // L·∫•y th√¥ng tin kh√≥a h·ªçc t·ª´ database
    // Import Course model (c·∫ßn require ƒë√∫ng path)
    const Course = require('../src/models/Course').default || require('../src/models/Course');
    
    const course = await Course.findById(courseId);
    if (!course) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc'
      });
    }

    // Ki·ªÉm tra xem user ƒë√£ ƒëƒÉng k√Ω kh√≥a h·ªçc ch∆∞a
    const Enrollment = require('../src/models/Enrollment').default || require('../src/models/Enrollment');
    const existingEnrollment = await Enrollment.findOne({
      userId: userId,
      courseId: courseId
    });

    if (existingEnrollment) {
      return res.status(400).json({
        success: false,
        message: 'B·∫°n ƒë√£ ƒëƒÉng k√Ω kh√≥a h·ªçc n√†y r·ªìi'
      });
    }

    // Chu·∫©n b·ªã d·ªØ li·ªáu order
    const orderData = {
      courseId: course._id.toString(),
      courseName: course.title,
      price: course.price,
      userId: userId,
      userEmail: userEmail
    };

    // T·∫°o payment link qua PayOS
    const paymentResult = await payOSService.createPaymentLink(orderData);

    if (paymentResult.success) {
      console.log('‚úÖ Payment link ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng cho kh√≥a h·ªçc:', course.title);
      
      res.json({
        success: true,
        message: 'T·∫°o payment link th√†nh c√¥ng',
        data: paymentResult.data
      });
    } else {
      console.error('‚ùå L·ªói t·∫°o payment link:', paymentResult.message);
      res.status(500).json({
        success: false,
        message: paymentResult.message
      });
    }

  } catch (error) {
    console.error('‚ùå L·ªói API t·∫°o payment:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi t·∫°o payment',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

/**
 * Ki·ªÉm tra tr·∫°ng th√°i thanh to√°n
 * GET /api/payos/payment-status/:orderCode
 */
const getPaymentStatus = async (req, res) => {
  try {
    const { orderCode } = req.params;
    const userId = req.user?.id;

    console.log(`üîç Ki·ªÉm tra payment status: ${orderCode} cho user: ${userId}`);

    if (!orderCode) {
      return res.status(400).json({
        success: false,
        message: 'orderCode l√† b·∫Øt bu·ªôc'
      });
    }

    // Ki·ªÉm tra tr·∫°ng th√°i t·ª´ PayOS
    const statusResult = await payOSService.getPaymentStatus(parseInt(orderCode));

    if (statusResult.success) {
      res.json({
        success: true,
        status: statusResult.status,
        data: statusResult.data
      });
    } else {
      res.status(500).json({
        success: false,
        message: statusResult.message
      });
    }

  } catch (error) {
    console.error('‚ùå L·ªói API ki·ªÉm tra payment status:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi ki·ªÉm tra payment status',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

/**
 * Webhook nh·∫≠n th√¥ng b√°o t·ª´ PayOS
 * POST /api/payos/webhook
 */
const handleWebhook = async (req, res) => {
  try {
    const webhookData = req.body;
    const signature = req.headers['payos-signature'];

    console.log('üîî Nh·∫≠n webhook t·ª´ PayOS:', {
      orderCode: webhookData.orderCode,
      status: webhookData.status
    });

    // X√°c th·ª±c webhook signature
    const isValidSignature = payOSService.verifyWebhookSignature(webhookData, signature);
    
    if (!isValidSignature) {
      console.error('‚ùå Webhook signature kh√¥ng h·ª£p l·ªá');
      return res.status(400).json({
        success: false,
        message: 'Invalid signature'
      });
    }

    // X·ª≠ l√Ω webhook theo status
    if (webhookData.status === 'PAID') {
      await handleSuccessfulPayment(webhookData);
    } else if (webhookData.status === 'CANCELLED') {
      await handleCancelledPayment(webhookData);
    }

    // Tr·∫£ v·ªÅ success cho PayOS
    res.json({
      success: true,
      message: 'Webhook processed successfully'
    });

  } catch (error) {
    console.error('‚ùå L·ªói x·ª≠ l√Ω webhook:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi x·ª≠ l√Ω webhook'
    });
  }
};

/**
 * X·ª≠ l√Ω thanh to√°n th√†nh c√¥ng
 */
const handleSuccessfulPayment = async (webhookData) => {
  try {
    const { orderCode, description } = webhookData;
    
    console.log(`üí∞ X·ª≠ l√Ω thanh to√°n th√†nh c√¥ng: ${orderCode}`);

    // TODO: Implement logic t·ª± ƒë·ªông ƒëƒÉng k√Ω kh√≥a h·ªçc khi thanh to√°n th√†nh c√¥ng
    // - T√¨m th√¥ng tin order t·ª´ orderCode
    // - T·∫°o enrollment record
    // - G·ª≠i email x√°c nh·∫≠n (n·∫øu c√≥)
    // - Log activity

    console.log('‚úÖ ƒê√£ x·ª≠ l√Ω thanh to√°n th√†nh c√¥ng cho order:', orderCode);

  } catch (error) {
    console.error('‚ùå L·ªói x·ª≠ l√Ω thanh to√°n th√†nh c√¥ng:', error);
  }
};

/**
 * X·ª≠ l√Ω thanh to√°n b·ªã h·ªßy
 */
const handleCancelledPayment = async (webhookData) => {
  try {
    const { orderCode } = webhookData;
    
    console.log(`üö´ X·ª≠ l√Ω thanh to√°n b·ªã h·ªßy: ${orderCode}`);

    // TODO: Implement logic x·ª≠ l√Ω khi payment b·ªã h·ªßy
    // - Log activity
    // - Th√¥ng b√°o cho user (n·∫øu c·∫ßn)

    console.log('‚úÖ ƒê√£ x·ª≠ l√Ω thanh to√°n b·ªã h·ªßy cho order:', orderCode);

  } catch (error) {
    console.error('‚ùå L·ªói x·ª≠ l√Ω thanh to√°n b·ªã h·ªßy:', error);
  }
};

/**
 * H·ªßy payment link
 * POST /api/payos/cancel-payment/:orderCode
 */
const cancelPayment = async (req, res) => {
  try {
    const { orderCode } = req.params;
    const { reason } = req.body;
    const userId = req.user?.id;

    console.log(`üö´ H·ªßy payment: ${orderCode} b·ªüi user: ${userId}`);

    if (!orderCode) {
      return res.status(400).json({
        success: false,
        message: 'orderCode l√† b·∫Øt bu·ªôc'
      });
    }

    // H·ªßy payment qua PayOS
    const cancelResult = await payOSService.cancelPaymentLink(
      parseInt(orderCode), 
      reason || 'User cancelled'
    );

    if (cancelResult.success) {
      res.json({
        success: true,
        message: 'ƒê√£ h·ªßy payment th√†nh c√¥ng',
        data: cancelResult.data
      });
    } else {
      res.status(500).json({
        success: false,
        message: cancelResult.message
      });
    }

  } catch (error) {
    console.error('‚ùå L·ªói API h·ªßy payment:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi h·ªßy payment',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

module.exports = {
  createPayment,
  getPaymentStatus,
  handleWebhook,
  cancelPayment
};