/**
 * PayOS Service
 * D·ªãch v·ª• t√≠ch h·ª£p PayOS ƒë·ªÉ t·∫°o QR thanh to√°n v√† x·ª≠ l√Ω payment
 */

// Import PayOS with correct destructuring
const { PayOS } = require("@payos/node");
const { PAYOS_CONFIG, validateConfig } = require('./config');

class PayOSService {
  constructor() {
    // Ki·ªÉm tra c·∫•u h√¨nh tr∆∞·ªõc khi kh·ªüi t·∫°o
    if (!validateConfig()) {
      console.error('‚ùå PayOS: C·∫•u h√¨nh kh√¥ng h·ª£p l·ªá');
      return;
    }

    console.log('üîß PayOS constructor type:', typeof PayOS);
    console.log('üîß PayOS constructor available:', !!PayOS);

    // Kh·ªüi t·∫°o PayOS client
    try {
      this.payOS = new PayOS(
        PAYOS_CONFIG.clientId,
        PAYOS_CONFIG.apiKey,
        PAYOS_CONFIG.checksumKey
      );
      console.log('‚úÖ PayOS Service ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng');
    } catch (error) {
      console.error('‚ùå L·ªói kh·ªüi t·∫°o PayOS:', error);
      throw error;
    }
  }

  /**
   * T·∫°o payment link cho kh√≥a h·ªçc
   * @param {Object} orderData - Th√¥ng tin ƒë∆°n h√†ng
   * @param {string} orderData.courseId - ID kh√≥a h·ªçc
   * @param {string} orderData.courseName - T√™n kh√≥a h·ªçc
   * @param {number} orderData.price - Gi√° kh√≥a h·ªçc
   * @param {string} orderData.userId - ID ng∆∞·ªùi d√πng
   * @param {string} orderData.userEmail - Email ng∆∞·ªùi d√πng
   * @returns {Promise<Object>} Payment link data
   */
  async createPaymentLink(orderData) {
    try {
      const { courseId, courseName, price, userId, userEmail } = orderData;
      
      // T·∫°o order code unique
      const orderCode = this.generateOrderCode();
      
      // Chu·∫©n b·ªã d·ªØ li·ªáu payment theo PayOS format
      const paymentData = {
        orderCode: orderCode,
        amount: Math.round(price), // PayOS y√™u c·∫ßu s·ªë nguy√™n
        description: `${courseId}`, // Ch·ªâ l∆∞u courseId ƒë·ªÉ d·ªÖ parse, ƒë√∫ng 24 k√Ω t·ª±
        items: [
          {
            name: courseName.length > 20 ? courseName.substring(0, 17) + '...' : courseName, // Gi·ªõi h·∫°n t√™n
            quantity: 1,
            price: Math.round(price)
          }
        ],
        returnUrl: PAYOS_CONFIG.returnUrl,
        cancelUrl: PAYOS_CONFIG.cancelUrl,
        buyerName: userEmail.split('@')[0], // L·∫•y ph·∫ßn tr∆∞·ªõc @ l√†m t√™n
        buyerEmail: userEmail,
        expiredAt: Math.floor(Date.now() / 1000) + (15 * 60), // H·∫øt h·∫°n sau 15 ph√∫t
      };

      console.log('üîÑ T·∫°o PayOS payment link:', {
        orderCode,
        amount: paymentData.amount,
        description: paymentData.description
      });

      // G·ªçi PayOS API ƒë·ªÉ t·∫°o payment link
      const paymentLinkResponse = await this.payOS.paymentRequests.create(paymentData);
      
      console.log('‚úÖ PayOS payment link ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng:', {
        orderCode: paymentLinkResponse.orderCode,
        checkoutUrl: paymentLinkResponse.checkoutUrl,
        qrCode: paymentLinkResponse.qrCode
      });

      return {
        success: true,
        data: {
          orderCode: paymentLinkResponse.orderCode,
          checkoutUrl: paymentLinkResponse.checkoutUrl,
          qrCode: paymentLinkResponse.qrCode,
          amount: paymentData.amount,
          description: paymentData.description,
          expiredAt: paymentData.expiredAt,
          // Th√™m th√¥ng tin kh√≥a h·ªçc ƒë·ªÉ tracking
          courseId,
          userId
        }
      };

    } catch (error) {
      console.error('‚ùå L·ªói t·∫°o PayOS payment link:', error);
      return {
        success: false,
        message: error.message || 'L·ªói t·∫°o payment link',
        error: error
      };
    }
  }

  /**
   * Ki·ªÉm tra tr·∫°ng th√°i thanh to√°n
   * @param {number} orderCode - M√£ ƒë∆°n h√†ng
   * @returns {Promise<Object>} Payment status
   */
  async getPaymentStatus(orderCode) {
    try {
      console.log(`üîç Ki·ªÉm tra tr·∫°ng th√°i payment: ${orderCode}`);
      
      const paymentInfo = await this.payOS.paymentRequests.get(orderCode);
      
      console.log('üìä Tr·∫°ng th√°i payment:', {
        orderCode: paymentInfo.orderCode,
        status: paymentInfo.status,
        amount: paymentInfo.amount
      });

      return {
        success: true,
        status: paymentInfo.status, // PENDING, PROCESSING, PAID, CANCELLED
        data: paymentInfo
      };

    } catch (error) {
      console.error(`‚ùå L·ªói ki·ªÉm tra tr·∫°ng th√°i payment ${orderCode}:`, error);
      
      // N·∫øu kh√¥ng t√¨m th·∫•y payment, c√≥ th·ªÉ ƒë√£ h·∫øt h·∫°n ho·∫∑c b·ªã cancel
      if (error.message && error.message.includes('not found')) {
        return {
          success: true,
          status: 'NOT_FOUND',
          message: 'Payment kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ h·∫øt h·∫°n'
        };
      }

      return {
        success: false,
        message: error.message || 'L·ªói ki·ªÉm tra tr·∫°ng th√°i payment',
        error: error
      };
    }
  }

  /**
   * H·ªßy payment link
   * @param {number} orderCode - M√£ ƒë∆°n h√†ng
   * @param {string} reason - L√Ω do h·ªßy
   * @returns {Promise<Object>} Cancel result
   */
  async cancelPaymentLink(orderCode, reason = 'User cancelled') {
    try {
      console.log(`üö´ H·ªßy payment link: ${orderCode}, l√Ω do: ${reason}`);
      
      const result = await this.payOS.paymentRequests.cancel(orderCode, reason);
      
      console.log('‚úÖ ƒê√£ h·ªßy payment link th√†nh c√¥ng:', orderCode);
      
      return {
        success: true,
        data: result
      };

    } catch (error) {
      console.error(`‚ùå L·ªói h·ªßy payment link ${orderCode}:`, error);
      return {
        success: false,
        message: error.message || 'L·ªói h·ªßy payment link',
        error: error
      };
    }
  }

  /**
   * X√°c th·ª±c webhook t·ª´ PayOS
   * @param {Object} webhookData - D·ªØ li·ªáu webhook
   * @param {string} signature - Ch·ªØ k√Ω webhook
   * @returns {boolean} K·∫øt qu·∫£ x√°c th·ª±c
   */
  verifyWebhookSignature(webhookData, signature) {
    try {
      return this.payOS.webhooks.verify(webhookData, signature);
    } catch (error) {
      console.error('‚ùå L·ªói x√°c th·ª±c webhook signature:', error);
      return false;
    }
  }

  /**
   * T·∫°o order code unique
   * @returns {number} Order code
   */
  generateOrderCode() {
    // T·∫°o order code t·ª´ timestamp + random number
    const timestamp = Date.now();
    const random = Math.floor(Math.random() * 1000);
    return parseInt(`${timestamp}${random}`.slice(-10)); // L·∫•y 10 s·ªë cu·ªëi
  }

  /**
   * Format s·ªë ti·ªÅn theo ƒë·ªãnh d·∫°ng VND
   * @param {number} amount - S·ªë ti·ªÅn
   * @returns {string} S·ªë ti·ªÅn ƒë√£ format
   */
  formatCurrency(amount) {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(amount);
  }
}

// Export singleton instance
const payOSService = new PayOSService();
module.exports = payOSService;