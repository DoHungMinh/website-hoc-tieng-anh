import OpenAI from 'openai';

interface VocabularyItem {
  id: string;
  word: string;
  pronunciation?: string;
  meaning: string;
  example: string;
}

interface GrammarItem {
  id: string;
  rule: string;
  structure?: string;
  explanation: string;
  example: string;
}

interface AIGenerationConfig {
  type: 'vocabulary' | 'grammar';
  topic: string;
  level: 'A1' | 'A2' | 'B1' | 'B2' | 'C1' | 'C2';
  contentLength: number;
  price: number;
  duration: string;
  includePronunciation: boolean;
  includeExamples: boolean;
  difficulty: 'basic' | 'intermediate' | 'advanced';
  targetAudience?: string;
}

interface GeneratedCourse {
  title: string;
  description: string;
  type: 'vocabulary' | 'grammar';
  level: string;
  duration: string;
  price: number;
  instructor: string;
  status: 'draft';
  studentsCount: number;
  lessonsCount: number;
  vocabulary: VocabularyItem[];
  grammar: GrammarItem[];
  requirements: string[];
  benefits: string[];
  curriculum: Array<{
    module: string;
    lessons: string[];
  }>;
}

class AICourseGeneratorService {
  private openai: OpenAI;

  constructor() {
    // Initialize OpenAI with API key from environment
    this.openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY || '',
    });
  }

  async generateCourse(config: AIGenerationConfig): Promise<GeneratedCourse> {
    console.log('ü§ñ AI Course Generator - Starting generation with config:', config);
    
    try {
      // Check if OpenAI is properly configured
      if (!process.env.OPENAI_API_KEY) {
        console.warn('‚ö†Ô∏è OpenAI API key not found, using fallback mock data');
        return this.generateMockCourse(config);
      }

      if (config.type === 'vocabulary') {
        return await this.generateVocabularyCourse(config);
      } else {
        return await this.generateGrammarCourse(config);
      }
    } catch (error) {
      console.error('‚ùå Error generating course with AI:', error);
      console.log('üîÑ Falling back to mock data generation');
      return this.generateMockCourse(config);
    }
  }

  private async generateVocabularyCourse(config: AIGenerationConfig): Promise<GeneratedCourse> {
    const prompt = this.createVocabularyPrompt(config);
    
    const completion = await this.openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content: "B·∫°n l√† m·ªôt chuy√™n gia gi·∫£ng d·∫°y ti·∫øng Anh, chuy√™n t·∫°o n·ªôi dung h·ªçc t·∫≠p ch·∫•t l∆∞·ª£ng cao. H√£y t·∫°o kh√≥a h·ªçc t·ª´ v·ª±ng theo y√™u c·∫ßu v√† tr·∫£ v·ªÅ JSON h·ª£p l·ªá."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: 0.7,
      max_tokens: 4000
    });

    const response = completion.choices[0]?.message?.content;
    if (!response) {
      throw new Error('No response from AI');
    }

    try {
      const courseData = JSON.parse(response);
      return this.formatVocabularyCourse(courseData, config);
    } catch (parseError) {
      console.error('Failed to parse AI response:', parseError);
      throw new Error('Invalid AI response format');
    }
  }

  private async generateGrammarCourse(config: AIGenerationConfig): Promise<GeneratedCourse> {
    const prompt = this.createGrammarPrompt(config);
    
    const completion = await this.openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content: "B·∫°n l√† m·ªôt chuy√™n gia ng·ªØ ph√°p ti·∫øng Anh, chuy√™n t·∫°o n·ªôi dung h·ªçc t·∫≠p c√≥ c·∫•u tr√∫c r√µ r√†ng. H√£y t·∫°o kh√≥a h·ªçc ng·ªØ ph√°p theo y√™u c·∫ßu v√† tr·∫£ v·ªÅ JSON h·ª£p l·ªá."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: 0.7,
      max_tokens: 4000
    });

    const response = completion.choices[0]?.message?.content;
    if (!response) {
      throw new Error('No response from AI');
    }

    try {
      const courseData = JSON.parse(response);
      return this.formatGrammarCourse(courseData, config);
    } catch (parseError) {
      console.error('Failed to parse AI response:', parseError);
      throw new Error('Invalid AI response format');
    }
  }

  private createVocabularyPrompt(config: AIGenerationConfig): string {
    return `
T·∫°o m·ªôt kh√≥a h·ªçc t·ª´ v·ª±ng ti·∫øng Anh v·ªõi c√°c th√¥ng tin sau:
- Ch·ªß ƒë·ªÅ: ${config.topic}
- C·∫•p ƒë·ªô: ${config.level}
- S·ªë l∆∞·ª£ng t·ª´ v·ª±ng: ${config.contentLength}
- Bao g·ªìm ph√°t √¢m: ${config.includePronunciation ? 'C√≥' : 'Kh√¥ng'}
- Bao g·ªìm v√≠ d·ª•: ${config.includeExamples ? 'C√≥' : 'Kh√¥ng'}
- ƒê·ªô kh√≥: ${config.difficulty}
${config.targetAudience ? `- ƒê·ªëi t∆∞·ª£ng: ${config.targetAudience}` : ''}

Tr·∫£ v·ªÅ JSON v·ªõi c·∫•u tr√∫c sau:
{
  "title": "T√™n kh√≥a h·ªçc h·∫•p d·∫´n",
  "description": "M√¥ t·∫£ chi ti·∫øt v·ªÅ kh√≥a h·ªçc",
  "vocabulary": [
    {
      "word": "t·ª´ ti·∫øng Anh",
      "pronunciation": "${config.includePronunciation ? '/phi√™n √¢m IPA/' : ''}",
      "meaning": "nghƒ©a ti·∫øng Vi·ªát",
      "example": "${config.includeExamples ? 'c√¢u v√≠ d·ª• ti·∫øng Anh' : ''}"
    }
  ],
  "requirements": ["y√™u c·∫ßu 1", "y√™u c·∫ßu 2"],
  "benefits": ["l·ª£i √≠ch 1", "l·ª£i √≠ch 2", "l·ª£i √≠ch 3"],
  "curriculum": [
    {
      "module": "T√™n module",
      "lessons": ["B√†i 1", "B√†i 2"]
    }
  ]
}

L∆∞u √Ω:
- T·ª´ v·ª±ng ph·∫£i ph√π h·ª£p v·ªõi c·∫•p ƒë·ªô ${config.level}
- Nghƒ©a ti·∫øng Vi·ªát ph·∫£i ch√≠nh x√°c v√† d·ªÖ hi·ªÉu
- V√≠ d·ª• ph·∫£i th·ª±c t·∫ø v√† c√≥ ng·ªØ c·∫£nh r√µ r√†ng
- T·∫°o ƒë·∫ßy ƒë·ªß ${config.contentLength} t·ª´ v·ª±ng
`;
  }

  private createGrammarPrompt(config: AIGenerationConfig): string {
    return `
T·∫°o m·ªôt kh√≥a h·ªçc ng·ªØ ph√°p ti·∫øng Anh v·ªõi c√°c th√¥ng tin sau:
- Ch·ªß ƒë·ªÅ: ${config.topic}
- C·∫•p ƒë·ªô: ${config.level}
- S·ªë l∆∞·ª£ng quy t·∫Øc: ${config.contentLength}
- ƒê·ªô kh√≥: ${config.difficulty}
${config.targetAudience ? `- ƒê·ªëi t∆∞·ª£ng: ${config.targetAudience}` : ''}

Tr·∫£ v·ªÅ JSON v·ªõi c·∫•u tr√∫c sau:
{
  "title": "T√™n kh√≥a h·ªçc h·∫•p d·∫´n",
  "description": "M√¥ t·∫£ chi ti·∫øt v·ªÅ kh√≥a h·ªçc",
  "grammar": [
    {
      "rule": "T√™n quy t·∫Øc ng·ªØ ph√°p",
      "structure": "C·∫•u tr√∫c c√¥ng th·ª©c",
      "explanation": "Gi·∫£i th√≠ch chi ti·∫øt b·∫±ng ti·∫øng Vi·ªát",
      "example": "V√≠ d·ª• minh h·ªça"
    }
  ],
  "requirements": ["y√™u c·∫ßu 1", "y√™u c·∫ßu 2"],
  "benefits": ["l·ª£i √≠ch 1", "l·ª£i √≠ch 2", "l·ª£i √≠ch 3"],
  "curriculum": [
    {
      "module": "T√™n module",
      "lessons": ["B√†i 1", "B√†i 2"]
    }
  ]
}

L∆∞u √Ω:
- Ng·ªØ ph√°p ph·∫£i ph√π h·ª£p v·ªõi c·∫•p ƒë·ªô ${config.level}
- Gi·∫£i th√≠ch b·∫±ng ti·∫øng Vi·ªát d·ªÖ hi·ªÉu
- V√≠ d·ª• ph·∫£i ƒëa d·∫°ng v√† th·ª±c t·∫ø
- T·∫°o ƒë·∫ßy ƒë·ªß ${config.contentLength} quy t·∫Øc ng·ªØ ph√°p
`;
  }

  private formatVocabularyCourse(aiResponse: any, config: AIGenerationConfig): GeneratedCourse {
    return {
      title: aiResponse.title || `T·ª´ v·ª±ng ${config.topic} - ${config.level}`,
      description: aiResponse.description || `Kh√≥a h·ªçc t·ª´ v·ª±ng v·ªÅ ${config.topic} d√†nh cho tr√¨nh ƒë·ªô ${config.level}`,
      type: 'vocabulary',
      level: config.level,
      duration: config.duration,
      price: config.price,
      instructor: 'AI Assistant',
      status: 'draft',
      studentsCount: 0,
      lessonsCount: Math.ceil(config.contentLength / 5),
      vocabulary: (aiResponse.vocabulary || []).map((item: any, index: number) => ({
        id: `vocab-${Date.now()}-${index}`,
        word: item.word || '',
        pronunciation: item.pronunciation || '',
        meaning: item.meaning || '',
        example: item.example || ''
      })),
      grammar: [],
      requirements: aiResponse.requirements || [`Tr√¨nh ƒë·ªô ${config.level} tr·ªü l√™n`],
      benefits: aiResponse.benefits || ['C·∫£i thi·ªán v·ªën t·ª´ v·ª±ng', 'N√¢ng cao kh·∫£ nƒÉng giao ti·∫øp'],
      curriculum: aiResponse.curriculum || []
    };
  }

  private formatGrammarCourse(aiResponse: any, config: AIGenerationConfig): GeneratedCourse {
    return {
      title: aiResponse.title || `Ng·ªØ ph√°p ${config.topic} - ${config.level}`,
      description: aiResponse.description || `Kh√≥a h·ªçc ng·ªØ ph√°p v·ªÅ ${config.topic} d√†nh cho tr√¨nh ƒë·ªô ${config.level}`,
      type: 'grammar',
      level: config.level,
      duration: config.duration,
      price: config.price,
      instructor: 'AI Assistant',
      status: 'draft',
      studentsCount: 0,
      lessonsCount: Math.ceil(config.contentLength / 3),
      vocabulary: [],
      grammar: (aiResponse.grammar || []).map((item: any, index: number) => ({
        id: `grammar-${Date.now()}-${index}`,
        rule: item.rule || '',
        structure: item.structure || '',
        explanation: item.explanation || '',
        example: item.example || ''
      })),
      requirements: aiResponse.requirements || [`Tr√¨nh ƒë·ªô ${config.level} tr·ªü l√™n`],
      benefits: aiResponse.benefits || ['N·∫Øm v·ªØng ng·ªØ ph√°p c∆° b·∫£n', 'C·∫£i thi·ªán k·ªπ nƒÉng vi·∫øt'],
      curriculum: aiResponse.curriculum || []
    };
  }

  private generateMockCourse(config: AIGenerationConfig): GeneratedCourse {
    console.log('üé≠ Generating mock course data for:', config.type, config.topic);
    
    const baseTitle = `${config.type === 'vocabulary' ? 'T·ª´ v·ª±ng' : 'Ng·ªØ ph√°p'} ${config.topic} - ${config.level}`;
    const baseDescription = `Kh√≥a h·ªçc ${config.type === 'vocabulary' ? 't·ª´ v·ª±ng' : 'ng·ªØ ph√°p'} v·ªÅ ch·ªß ƒë·ªÅ ${config.topic} d√†nh cho h·ªçc vi√™n tr√¨nh ƒë·ªô ${config.level}`;

    if (config.type === 'vocabulary') {
      const mockVocabulary: VocabularyItem[] = Array.from({ length: Math.min(config.contentLength, 20) }, (_, i) => ({
        id: `vocab-${Date.now()}-${i}`,
        word: `${config.topic.toLowerCase().replace(/\s+/g, '')}-word-${i + 1}`,
        pronunciation: config.includePronunciation ? `/w…úÀêrd ${i + 1}/` : '',
        meaning: `Nghƒ©a c·ªßa t·ª´ v·ªÅ ${config.topic} s·ªë ${i + 1}`,
        example: config.includeExamples ? `This is an example sentence using ${config.topic} word ${i + 1}.` : ''
      }));

      return {
        title: baseTitle,
        description: baseDescription,
        type: 'vocabulary',
        level: config.level,
        duration: config.duration,
        price: config.price,
        instructor: 'AI Assistant',
        status: 'draft',
        studentsCount: 0,
        lessonsCount: Math.ceil(config.contentLength / 5),
        vocabulary: mockVocabulary,
        grammar: [],
        requirements: [`Tr√¨nh ƒë·ªô ${config.level} tr·ªü l√™n`, 'C√≥ kh·∫£ nƒÉng ƒë·ªçc hi·ªÉu c∆° b·∫£n'],
        benefits: [
          `N·∫Øm v·ªØng ${config.contentLength} t·ª´ v·ª±ng ch·ªß ƒë·ªÅ ${config.topic}`,
          'C·∫£i thi·ªán kh·∫£ nƒÉng giao ti·∫øp h√†ng ng√†y',
          'T·ª± tin h∆°n trong vi·ªác s·ª≠ d·ª•ng ti·∫øng Anh'
        ],
        curriculum: [
          {
            module: `T·ª´ v·ª±ng c∆° b·∫£n v·ªÅ ${config.topic}`,
            lessons: ['Gi·ªõi thi·ªáu t·ª´ v·ª±ng', 'Th·ª±c h√†nh ph√°t √¢m', '·ª®ng d·ª•ng trong c√¢u']
          }
        ]
      };
    } else {
      const mockGrammar: GrammarItem[] = Array.from({ length: Math.min(config.contentLength, 15) }, (_, i) => ({
        id: `grammar-${Date.now()}-${i}`,
        rule: `${config.topic} Rule ${i + 1}`,
        structure: `Structure pattern ${i + 1}`,
        explanation: `Gi·∫£i th√≠ch chi ti·∫øt quy t·∫Øc ng·ªØ ph√°p ${config.topic} s·ªë ${i + 1}`,
        example: config.includeExamples ? `Example sentence demonstrating ${config.topic} rule ${i + 1}.` : ''
      }));

      return {
        title: baseTitle,
        description: baseDescription,
        type: 'grammar',
        level: config.level,
        duration: config.duration,
        price: config.price,
        instructor: 'AI Assistant',
        status: 'draft',
        studentsCount: 0,
        lessonsCount: Math.ceil(config.contentLength / 3),
        vocabulary: [],
        grammar: mockGrammar,
        requirements: [`Tr√¨nh ƒë·ªô ${config.level} tr·ªü l√™n`, 'C√≥ ki·∫øn th·ª©c ng·ªØ ph√°p c∆° b·∫£n'],
        benefits: [
          `N·∫Øm v·ªØng ${config.contentLength} quy t·∫Øc ng·ªØ ph√°p ${config.topic}`,
          'C·∫£i thi·ªán kh·∫£ nƒÉng vi·∫øt v√† n√≥i',
          'S·ª≠ d·ª•ng ng·ªØ ph√°p ch√≠nh x√°c trong giao ti·∫øp'
        ],
        curriculum: [
          {
            module: `Ng·ªØ ph√°p c∆° b·∫£n v·ªÅ ${config.topic}`,
            lessons: ['Gi·ªõi thi·ªáu quy t·∫Øc', 'C·∫•u tr√∫c c√¢u', 'Th·ª±c h√†nh ·ª©ng d·ª•ng']
          }
        ]
      };
    }
  }
}

export const aiCourseGeneratorService = new AICourseGeneratorService();
export type { AIGenerationConfig, GeneratedCourse };
