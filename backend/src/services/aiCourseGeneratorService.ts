import OpenAI from 'openai';

interface VocabularyItem {
  id: string;
  word: string;
  pronunciation?: string;
  meaning: string;
  example: string;
}

interface GrammarItem {
  id: string;
  rule: string;
  structure?: string;
  explanation: string;
  example: string;
}

interface AIGenerationConfig {
  type: 'vocabulary' | 'grammar';
  topic: string;
  level: 'A1' | 'A2' | 'B1' | 'B2' | 'C1' | 'C2';
  contentLength: number;
  price: number;
  duration: string;
  includePronunciation: boolean;
  includeExamples: boolean;
  difficulty: 'basic' | 'intermediate' | 'advanced';
  targetAudience?: string;
}

interface GeneratedCourse {
  title: string;
  description: string;
  type: 'vocabulary' | 'grammar';
  level: string;
  duration: string;
  price: number;
  instructor: string;
  status: 'draft';
  studentsCount: number;
  lessonsCount: number;
  vocabulary: VocabularyItem[];
  grammar: GrammarItem[];
  requirements: string[];
  benefits: string[];
  curriculum: Array<{
    module: string;
    lessons: string[];
  }>;
}

class AICourseGeneratorService {
  private openai: OpenAI;

  constructor() {
    // Initialize OpenAI with API key from environment
    this.openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY || '',
    });
  }

  async generateCourse(config: AIGenerationConfig): Promise<GeneratedCourse> {
    console.log('ü§ñ AI Course Generator - Starting generation with config:', config);
    console.log(`üìä Requested: ${config.contentLength} ${config.type === 'vocabulary' ? 'vocabulary items' : 'grammar rules'}`);
    
    try {
      // Check if OpenAI is properly configured
      if (!process.env.OPENAI_API_KEY) {
        console.warn('‚ö†Ô∏è OpenAI API key not found, using fallback mock data');
        return this.generateMockCourse(config);
      }

      if (config.type === 'vocabulary') {
        return await this.generateVocabularyCourse(config);
      } else {
        return await this.generateGrammarCourse(config);
      }
    } catch (error) {
      console.error('‚ùå Error generating course with AI:', error);
      
      // If it's a timeout or token limit error, inform the user
      if (error instanceof Error) {
        const errorMsg = error.message.toLowerCase();
        if (errorMsg.includes('timeout') || errorMsg.includes('token')) {
          console.error('üí• Generation failed due to timeout or token limit. Content too large for AI generation.');
        }
      }
      
      console.log('üîÑ Falling back to mock data generation (this will include all requested items)');
      return this.generateMockCourse(config);
    }
  }

  private async generateVocabularyCourse(config: AIGenerationConfig): Promise<GeneratedCourse> {
    const prompt = this.createVocabularyPrompt(config);
    
    // Calculate required tokens: ~250 tokens per vocabulary item + 500 for metadata
    // For 30 items: 30 * 250 + 500 = 8000 tokens
    const estimatedTokens = Math.min(config.contentLength * 250 + 500, 16000);
    
    console.log(`üî¢ Generating ${config.contentLength} vocabulary items, estimated tokens: ${estimatedTokens}`);
    
    const completion = await this.openai.chat.completions.create({
      model: "gpt-4o-mini", // Fast and cost-effective model
      messages: [
        {
          role: "system",
          content: "B·∫°n l√† m·ªôt chuy√™n gia gi·∫£ng d·∫°y ti·∫øng Anh, chuy√™n t·∫°o n·ªôi dung h·ªçc t·∫≠p ch·∫•t l∆∞·ª£ng cao. H√£y t·∫°o kh√≥a h·ªçc t·ª´ v·ª±ng theo y√™u c·∫ßu v√† tr·∫£ v·ªÅ JSON h·ª£p l·ªá. B·∫ÆT BU·ªòC ph·∫£i t·∫°o ƒë·ªß s·ªë l∆∞·ª£ng t·ª´ v·ª±ng theo y√™u c·∫ßu."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: 0.7,
      max_tokens: estimatedTokens,
      response_format: { type: "json_object" } // Force JSON mode
    });

    const response = completion.choices[0]?.message?.content;
    if (!response) {
      throw new Error('No response from AI');
    }

    try {
      // Clean the response: remove markdown code blocks if present
      const cleanedResponse = this.cleanJsonResponse(response);
      
      const courseData = JSON.parse(cleanedResponse);
      const formattedCourse = this.formatVocabularyCourse(courseData, config);
      
      // Validate that we got the correct number of items
      const actualCount = formattedCourse.vocabulary.length;
      console.log(`‚úÖ AI generated ${actualCount}/${config.contentLength} vocabulary items`);
      
      if (actualCount < config.contentLength * 0.8) {
        console.warn(`‚ö†Ô∏è AI generated only ${actualCount} items, expected ${config.contentLength}`);
      }
      
      return formattedCourse;
    } catch (parseError) {
      console.error('Failed to parse AI response:', parseError);
      throw new Error('Invalid AI response format');
    }
  }

  private async generateGrammarCourse(config: AIGenerationConfig): Promise<GeneratedCourse> {
    const prompt = this.createGrammarPrompt(config);
    
    // Calculate required tokens: ~300 tokens per grammar rule + 500 for metadata
    // For 30 rules: 30 * 300 + 500 = 9500 tokens
    const estimatedTokens = Math.min(config.contentLength * 300 + 500, 16000);
    
    console.log(`üî¢ Generating ${config.contentLength} grammar rules, estimated tokens: ${estimatedTokens}`);
    
    const completion = await this.openai.chat.completions.create({
      model: "gpt-4o-mini", // Fast and cost-effective model
      messages: [
        {
          role: "system",
          content: "B·∫°n l√† m·ªôt chuy√™n gia ng·ªØ ph√°p ti·∫øng Anh, chuy√™n t·∫°o n·ªôi dung h·ªçc t·∫≠p c√≥ c·∫•u tr√∫c r√µ r√†ng. H√£y t·∫°o kh√≥a h·ªçc ng·ªØ ph√°p theo y√™u c·∫ßu v√† tr·∫£ v·ªÅ JSON h·ª£p l·ªá. B·∫ÆT BU·ªòC ph·∫£i t·∫°o ƒë·ªß s·ªë l∆∞·ª£ng quy t·∫Øc ng·ªØ ph√°p theo y√™u c·∫ßu."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: 0.7,
      max_tokens: estimatedTokens,
      response_format: { type: "json_object" } // Force JSON mode
    });

    const response = completion.choices[0]?.message?.content;
    if (!response) {
      throw new Error('No response from AI');
    }

    try {
      // Clean the response: remove markdown code blocks if present
      const cleanedResponse = this.cleanJsonResponse(response);
      
      const courseData = JSON.parse(cleanedResponse);
      const formattedCourse = this.formatGrammarCourse(courseData, config);
      
      // Validate that we got the correct number of items
      const actualCount = formattedCourse.grammar.length;
      console.log(`‚úÖ AI generated ${actualCount}/${config.contentLength} grammar rules`);
      
      if (actualCount < config.contentLength * 0.8) {
        console.warn(`‚ö†Ô∏è AI generated only ${actualCount} rules, expected ${config.contentLength}`);
      }
      
      return formattedCourse;
    } catch (parseError) {
      console.error('Failed to parse AI response:', parseError);
      throw new Error('Invalid AI response format');
    }
  }

  /**
   * Clean JSON response from AI - remove markdown code blocks if present
   * OpenAI sometimes wraps JSON in ```json ... ``` blocks
   */
  private cleanJsonResponse(response: string): string {
    let cleaned = response.trim();
    
    // Remove markdown code blocks (```json ... ``` or ``` ... ```)
    if (cleaned.startsWith('```')) {
      // Remove opening ```json or ```
      cleaned = cleaned.replace(/^```(?:json)?\s*\n?/i, '');
      // Remove closing ```
      cleaned = cleaned.replace(/\n?```\s*$/i, '');
    }
    
    return cleaned.trim();
  }

  /**
   * Get specific instructions based on difficulty level
   */
  private getDifficultyInstructions(difficulty: string, type: 'vocabulary' | 'grammar'): string {
    const instructions = {
      vocabulary: {
        basic: `
- Ch·ªçn t·ª´ v·ª±ng PH·ªî BI·∫æN, th∆∞·ªùng g·∫∑p trong cu·ªôc s·ªëng h√†ng ng√†y
- T·ª´ c√≥ 1-2 √¢m ti·∫øt, d·ªÖ ph√°t √¢m, d·ªÖ nh·ªõ (v√≠ d·ª•: book, food, happy, work)
- Nghƒ©a ƒë∆°n gi·∫£n, m·ªôt t·ª´ ti·∫øng Vi·ªát t∆∞∆°ng ·ª©ng m·ªôt nghƒ©a ch√≠nh
- V√≠ d·ª• l√† c√¢u ƒê∆†N GI·∫¢N, c·∫•u tr√∫c Subject + Verb + Object c∆° b·∫£n
- Tr√°nh t·ª´ chuy√™n ng√†nh, t·ª´ gh√©p ph·ª©c t·∫°p, phrasal verbs
- Ph√π h·ª£p cho ng∆∞·ªùi M·ªöI B·∫ÆT ƒê·∫¶U h·ªçc ti·∫øng Anh`,
        
        intermediate: `
- Ch·ªçn t·ª´ v·ª±ng TRUNG B√åNH, c√≥ th·ªÉ c√≥ nhi·ªÅu nghƒ©a ho·∫∑c c√°ch d√πng
- T·ª´ c√≥ 2-3 √¢m ti·∫øt, bao g·ªìm c·∫£ t·ª´ gh√©p (v√≠ d·ª•: achievement, environmental, relationship)
- Nghƒ©a CHI TI·∫æT h∆°n, c√≥ th·ªÉ k√®m t·ª´ ƒë·ªìng nghƒ©a ho·∫∑c tr√°i nghƒ©a
- V√≠ d·ª• l√† c√¢u PH·ª®C T·∫†P h∆°n v·ªõi c·∫•u tr√∫c ƒëa d·∫°ng (m·ªánh ƒë·ªÅ ph·ª•, li√™n t·ª´)
- C√≥ th·ªÉ bao g·ªìm collocations, phrasal verbs th√¥ng d·ª•ng
- Ph√π h·ª£p cho ng∆∞·ªùi c√≥ N·ªÄN T·∫¢NG v√† mu·ªën n√¢ng cao`,
        
        advanced: `
- Ch·ªçn t·ª´ v·ª±ng CHUY√äN S√ÇU, h·ªçc thu·∫≠t, chuy√™n ng√†nh ho·∫∑c formal
- T·ª´ c√≥ 3-4+ √¢m ti·∫øt, t·ª´ Latinh, t·ª´ h·ªçc thu·∫≠t (v√≠ d·ª•: implementation, sustainability, optimization)
- Nghƒ©a R·∫§T CHI TI·∫æT v·ªõi nhi·ªÅu s·∫Øc th√°i, ng·ªØ c·∫£nh s·ª≠ d·ª•ng c·ª• th·ªÉ
- V√≠ d·ª• l√† c√¢u PH·ª®C T·∫†P, academic style, v·ªõi multiple clauses v√† advanced structures
- Bao g·ªìm idioms, collocations chuy√™n ng√†nh, technical terms
- Ph√π h·ª£p cho ng∆∞·ªùi TH√ÄNH TH·∫†O ho·∫∑c c·∫ßn ti·∫øng Anh chuy√™n m√¥n cao`
      },
      grammar: {
        basic: `
- Ch·ªçn QUY T·∫ÆC C∆† B·∫¢N, n·ªÅn t·∫£ng c·ªßa ti·∫øng Anh (Present Simple, Past Simple, c√°c th√¨ ƒë∆°n gi·∫£n)
- Gi·∫£i th√≠ch ƒê∆†N GI·∫¢N, d·ªÖ hi·ªÉu, tr√°nh thu·∫≠t ng·ªØ ph·ª©c t·∫°p
- C·∫•u tr√∫c C·ª§ TH·ªÇ, R√ï R√ÄNG v·ªõi c√¥ng th·ª©c ƒë∆°n gi·∫£n (S + V + O)
- V√≠ d·ª• l√† c√¢u NG·∫ÆN G·ªåN, c·∫•u tr√∫c ƒë∆°n, d·ªÖ hi·ªÉu ngay
- T·∫≠p trung v√†o c√°c quy t·∫Øc TH∆Ø·ªúNG D√ôNG trong giao ti·∫øp h√†ng ng√†y
- Ph√π h·ª£p cho ng∆∞·ªùi M·ªöI B·∫ÆT ƒê·∫¶U h·ªçc ng·ªØ ph√°p`,
        
        intermediate: `
- Ch·ªçn QUY T·∫ÆC TRUNG B√åNH ph·ª©c t·∫°p h∆°n (Perfect tenses, Passive Voice, Conditionals)
- Gi·∫£i th√≠ch CHI TI·∫æT v·ªõi c√°c tr∆∞·ªùng h·ª£p ngo·∫°i l·ªá v√† l∆∞u √Ω ƒë·∫∑c bi·ªát
- C·∫•u tr√∫c ƒêA D·∫†NG v·ªõi nhi·ªÅu bi·∫øn th·ªÉ v√† c√°ch d√πng kh√°c nhau
- V√≠ d·ª• PHONG PH√ö, c√≥ ƒë·ªô d√†i trung b√¨nh, ƒëa d·∫°ng ng·ªØ c·∫£nh
- Bao g·ªìm so s√°nh v·ªõi c√°c c·∫•u tr√∫c t∆∞∆°ng t·ª± v√† c√°ch ph√¢n bi·ªát
- Ph√π h·ª£p cho ng∆∞·ªùi c√≥ N·ªÄN T·∫¢NG v√† mu·ªën ho√†n thi·ªán`,
        
        advanced: `
- Ch·ªçn QUY T·∫ÆC N√ÇNG CAO, tinh t·∫ø (Subjunctive, Inversion, Advanced Modals, Cleft Sentences)
- Gi·∫£i th√≠ch S√ÇU S·∫ÆC v·ªõi ph√¢n t√≠ch ng·ªØ ph√°p h·ªçc thu·∫≠t, formal/informal distinctions
- C·∫•u tr√∫c PH·ª®C T·∫†P v·ªõi nhi·ªÅu layers, embedded clauses, advanced syntax
- V√≠ d·ª• l√† c√¢u D√ÄI, PH·ª®C T·∫†P, academic/formal style, sophisticated structures
- Bao g·ªìm stylistic variations, register differences, rhetorical effects
- Ph√π h·ª£p cho ng∆∞·ªùi TH√ÄNH TH·∫†O ho·∫∑c h·ªçc thu·∫≠t/chuy√™n nghi·ªáp`
      }
    };

    return instructions[type][difficulty as keyof typeof instructions.vocabulary] || instructions[type].basic;
  }

  private createVocabularyPrompt(config: AIGenerationConfig): string {
    return `
T·∫°o m·ªôt kh√≥a h·ªçc t·ª´ v·ª±ng ti·∫øng Anh v·ªõi c√°c th√¥ng tin sau:
- Ch·ªß ƒë·ªÅ: ${config.topic}
- C·∫•p ƒë·ªô: ${config.level}
- S·ªë l∆∞·ª£ng t·ª´ v·ª±ng: ${config.contentLength} (B·∫ÆT BU·ªòC - KH√îNG ƒê∆Ø·ª¢C THI·∫æU)
- Bao g·ªìm ph√°t √¢m: ${config.includePronunciation ? 'C√≥' : 'Kh√¥ng'}
- Bao g·ªìm v√≠ d·ª•: ${config.includeExamples ? 'C√≥' : 'Kh√¥ng'}
- ƒê·ªô kh√≥: ${config.difficulty}
${config.targetAudience ? `- ƒê·ªëi t∆∞·ª£ng: ${config.targetAudience}` : ''}

Y√äU C·∫¶U QUAN TR·ªåNG:
- Ph·∫£i t·∫°o ƒê·ª¶ CH√çNH X√ÅC ${config.contentLength} t·ª´ v·ª±ng trong m·∫£ng "vocabulary"
- KH√îNG ƒë∆∞·ª£c t·∫°o √≠t h∆°n ho·∫∑c nhi·ªÅu h∆°n s·ªë l∆∞·ª£ng y√™u c·∫ßu
- ƒê·∫øm k·ªπ ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ ƒë√∫ng ${config.contentLength} t·ª´

Tr·∫£ v·ªÅ JSON v·ªõi c·∫•u tr√∫c sau:
{
  "title": "T√™n kh√≥a h·ªçc h·∫•p d·∫´n",
  "description": "M√¥ t·∫£ chi ti·∫øt v·ªÅ kh√≥a h·ªçc",
  "vocabulary": [
    {
      "word": "t·ª´ ti·∫øng Anh",
      "pronunciation": "${config.includePronunciation ? '/phi√™n √¢m IPA/' : ''}",
      "meaning": "nghƒ©a ti·∫øng Vi·ªát",
      "example": "${config.includeExamples ? 'c√¢u v√≠ d·ª• ti·∫øng Anh' : ''}"
    }
  ],
  "requirements": ["y√™u c·∫ßu 1", "y√™u c·∫ßu 2"],
  "benefits": ["l·ª£i √≠ch 1", "l·ª£i √≠ch 2", "l·ª£i √≠ch 3"],
  "curriculum": [
    {
      "module": "T√™n module",
      "lessons": ["B√†i 1", "B√†i 2"]
    }
  ]
}

L∆∞u √Ω ch·∫•t l∆∞·ª£ng:
- T·ª´ v·ª±ng ph·∫£i ph√π h·ª£p v·ªõi c·∫•p ƒë·ªô ${config.level}
- Nghƒ©a ti·∫øng Vi·ªát ph·∫£i ch√≠nh x√°c v√† d·ªÖ hi·ªÉu
- V√≠ d·ª• ph·∫£i th·ª±c t·∫ø v√† c√≥ ng·ªØ c·∫£nh r√µ r√†ng
- Ph·∫£i t·∫°o ƒë·∫ßy ƒë·ªß ${config.contentLength} t·ª´ v·ª±ng (ki·ªÉm tra l·∫°i s·ªë l∆∞·ª£ng)

ƒê·ªò KH√ì "${config.difficulty.toUpperCase()}" - Y√äU C·∫¶U C·ª§ TH·ªÇ:
${this.getDifficultyInstructions(config.difficulty, 'vocabulary')}
`;
  }

  private createGrammarPrompt(config: AIGenerationConfig): string {
    return `
T·∫°o m·ªôt kh√≥a h·ªçc ng·ªØ ph√°p ti·∫øng Anh v·ªõi c√°c th√¥ng tin sau:
- Ch·ªß ƒë·ªÅ: ${config.topic}
- C·∫•p ƒë·ªô: ${config.level}
- S·ªë l∆∞·ª£ng quy t·∫Øc: ${config.contentLength} (B·∫ÆT BU·ªòC - KH√îNG ƒê∆Ø·ª¢C THI·∫æU)
- ƒê·ªô kh√≥: ${config.difficulty}
${config.targetAudience ? `- ƒê·ªëi t∆∞·ª£ng: ${config.targetAudience}` : ''}

Y√äU C·∫¶U QUAN TR·ªåNG:
- Ph·∫£i t·∫°o ƒê·ª¶ CH√çNH X√ÅC ${config.contentLength} quy t·∫Øc ng·ªØ ph√°p trong m·∫£ng "grammar"
- KH√îNG ƒë∆∞·ª£c t·∫°o √≠t h∆°n ho·∫∑c nhi·ªÅu h∆°n s·ªë l∆∞·ª£ng y√™u c·∫ßu
- ƒê·∫øm k·ªπ ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ ƒë√∫ng ${config.contentLength} quy t·∫Øc

Tr·∫£ v·ªÅ JSON v·ªõi c·∫•u tr√∫c sau:
{
  "title": "T√™n kh√≥a h·ªçc h·∫•p d·∫´n",
  "description": "M√¥ t·∫£ chi ti·∫øt v·ªÅ kh√≥a h·ªçc",
  "grammar": [
    {
      "rule": "T√™n quy t·∫Øc ng·ªØ ph√°p",
      "structure": "C·∫•u tr√∫c c√¥ng th·ª©c",
      "explanation": "Gi·∫£i th√≠ch chi ti·∫øt b·∫±ng ti·∫øng Vi·ªát",
      "example": "V√≠ d·ª• minh h·ªça"
    }
  ],
  "requirements": ["y√™u c·∫ßu 1", "y√™u c·∫ßu 2"],
  "benefits": ["l·ª£i √≠ch 1", "l·ª£i √≠ch 2", "l·ª£i √≠ch 3"],
  "curriculum": [
    {
      "module": "T√™n module",
      "lessons": ["B√†i 1", "B√†i 2"]
    }
  ]
}

L∆∞u √Ω ch·∫•t l∆∞·ª£ng:
- Ng·ªØ ph√°p ph·∫£i ph√π h·ª£p v·ªõi c·∫•p ƒë·ªô ${config.level}
- Gi·∫£i th√≠ch b·∫±ng ti·∫øng Vi·ªát d·ªÖ hi·ªÉu
- V√≠ d·ª• ph·∫£i ƒëa d·∫°ng v√† th·ª±c t·∫ø
- Ph·∫£i t·∫°o ƒë·∫ßy ƒë·ªß ${config.contentLength} quy t·∫Øc ng·ªØ ph√°p (ki·ªÉm tra l·∫°i s·ªë l∆∞·ª£ng)

ƒê·ªò KH√ì "${config.difficulty.toUpperCase()}" - Y√äU C·∫¶U C·ª§ TH·ªÇ:
${this.getDifficultyInstructions(config.difficulty, 'grammar')}
`;
  }

  private formatVocabularyCourse(aiResponse: any, config: AIGenerationConfig): GeneratedCourse {
    return {
      title: aiResponse.title || `T·ª´ v·ª±ng ${config.topic} - ${config.level}`,
      description: aiResponse.description || `Kh√≥a h·ªçc t·ª´ v·ª±ng v·ªÅ ${config.topic} d√†nh cho tr√¨nh ƒë·ªô ${config.level}`,
      type: 'vocabulary',
      level: config.level,
      duration: config.duration,
      price: config.price,
      instructor: 'AI Assistant',
      status: 'draft',
      studentsCount: 0,
      lessonsCount: Math.ceil(config.contentLength / 5),
      vocabulary: (aiResponse.vocabulary || []).map((item: any, index: number) => ({
        id: `vocab-${Date.now()}-${index}`,
        word: item.word || '',
        pronunciation: item.pronunciation || '',
        meaning: item.meaning || '',
        example: item.example || ''
      })),
      grammar: [],
      requirements: aiResponse.requirements || [`Tr√¨nh ƒë·ªô ${config.level} tr·ªü l√™n`],
      benefits: aiResponse.benefits || ['C·∫£i thi·ªán v·ªën t·ª´ v·ª±ng', 'N√¢ng cao kh·∫£ nƒÉng giao ti·∫øp'],
      curriculum: aiResponse.curriculum || []
    };
  }

  private formatGrammarCourse(aiResponse: any, config: AIGenerationConfig): GeneratedCourse {
    return {
      title: aiResponse.title || `Ng·ªØ ph√°p ${config.topic} - ${config.level}`,
      description: aiResponse.description || `Kh√≥a h·ªçc ng·ªØ ph√°p v·ªÅ ${config.topic} d√†nh cho tr√¨nh ƒë·ªô ${config.level}`,
      type: 'grammar',
      level: config.level,
      duration: config.duration,
      price: config.price,
      instructor: 'AI Assistant',
      status: 'draft',
      studentsCount: 0,
      lessonsCount: Math.ceil(config.contentLength / 3),
      vocabulary: [],
      grammar: (aiResponse.grammar || []).map((item: any, index: number) => ({
        id: `grammar-${Date.now()}-${index}`,
        rule: item.rule || '',
        structure: item.structure || '',
        explanation: item.explanation || '',
        example: item.example || ''
      })),
      requirements: aiResponse.requirements || [`Tr√¨nh ƒë·ªô ${config.level} tr·ªü l√™n`],
      benefits: aiResponse.benefits || ['N·∫Øm v·ªØng ng·ªØ ph√°p c∆° b·∫£n', 'C·∫£i thi·ªán k·ªπ nƒÉng vi·∫øt'],
      curriculum: aiResponse.curriculum || []
    };
  }

  private generateMockCourse(config: AIGenerationConfig): GeneratedCourse {
    console.log('üé≠ Generating mock course data for:', config.type, config.topic);
    
    const baseTitle = `${config.type === 'vocabulary' ? 'T·ª´ v·ª±ng' : 'Ng·ªØ ph√°p'} ${config.topic} - ${config.level}`;
    const baseDescription = `Kh√≥a h·ªçc ${config.type === 'vocabulary' ? 't·ª´ v·ª±ng' : 'ng·ªØ ph√°p'} v·ªÅ ch·ªß ƒë·ªÅ ${config.topic} d√†nh cho h·ªçc vi√™n tr√¨nh ƒë·ªô ${config.level}`;

    if (config.type === 'vocabulary') {
      // Generate full requested amount (no limit)
      const mockVocabulary: VocabularyItem[] = Array.from({ length: config.contentLength }, (_, i) => ({
        id: `vocab-${Date.now()}-${i}`,
        word: `${config.topic.toLowerCase().replace(/\s+/g, '')}-word-${i + 1}`,
        pronunciation: config.includePronunciation ? `/w…úÀêrd ${i + 1}/` : '',
        meaning: `Nghƒ©a c·ªßa t·ª´ v·ªÅ ${config.topic} s·ªë ${i + 1}`,
        example: config.includeExamples ? `This is an example sentence using ${config.topic} word ${i + 1}.` : ''
      }));

      return {
        title: baseTitle,
        description: baseDescription,
        type: 'vocabulary',
        level: config.level,
        duration: config.duration,
        price: config.price,
        instructor: 'AI Assistant',
        status: 'draft',
        studentsCount: 0,
        lessonsCount: Math.ceil(config.contentLength / 5),
        vocabulary: mockVocabulary,
        grammar: [],
        requirements: [`Tr√¨nh ƒë·ªô ${config.level} tr·ªü l√™n`, 'C√≥ kh·∫£ nƒÉng ƒë·ªçc hi·ªÉu c∆° b·∫£n'],
        benefits: [
          `N·∫Øm v·ªØng ${config.contentLength} t·ª´ v·ª±ng ch·ªß ƒë·ªÅ ${config.topic}`,
          'C·∫£i thi·ªán kh·∫£ nƒÉng giao ti·∫øp h√†ng ng√†y',
          'T·ª± tin h∆°n trong vi·ªác s·ª≠ d·ª•ng ti·∫øng Anh'
        ],
        curriculum: [
          {
            module: `T·ª´ v·ª±ng c∆° b·∫£n v·ªÅ ${config.topic}`,
            lessons: ['Gi·ªõi thi·ªáu t·ª´ v·ª±ng', 'Th·ª±c h√†nh ph√°t √¢m', '·ª®ng d·ª•ng trong c√¢u']
          }
        ]
      };
    } else {
      // Generate realistic grammar content based on topic (full requested amount)
      const mockGrammar = this.generateRealisticGrammar(config.topic, config.level, config.contentLength);

      return {
        title: baseTitle,
        description: baseDescription,
        type: 'grammar',
        level: config.level,
        duration: config.duration,
        price: config.price,
        instructor: 'AI Assistant',
        status: 'draft',
        studentsCount: 0,
        lessonsCount: Math.ceil(config.contentLength / 3),
        vocabulary: [],
        grammar: mockGrammar,
        requirements: [`Tr√¨nh ƒë·ªô ${config.level} tr·ªü l√™n`, 'C√≥ ki·∫øn th·ª©c ng·ªØ ph√°p c∆° b·∫£n'],
        benefits: [
          `N·∫Øm v·ªØng ${mockGrammar.length} quy t·∫Øc ng·ªØ ph√°p ${config.topic}`,
          'C·∫£i thi·ªán kh·∫£ nƒÉng vi·∫øt v√† n√≥i',
          'S·ª≠ d·ª•ng ng·ªØ ph√°p ch√≠nh x√°c trong giao ti·∫øp'
        ],
        curriculum: [
          {
            module: `Ng·ªØ ph√°p c∆° b·∫£n v·ªÅ ${config.topic}`,
            lessons: ['Gi·ªõi thi·ªáu quy t·∫Øc', 'C·∫•u tr√∫c c√¢u', 'Th·ª±c h√†nh ·ª©ng d·ª•ng']
          }
        ]
      };
    }
  }

  private generateRealisticGrammar(topic: string, level: string, count: number): GrammarItem[] {
    const grammarDatabase = {
      'Modal Verbs': [
        {
          rule: 'Can - Kh·∫£ nƒÉng v√† Xin ph√©p',
          structure: 'Subject + can + base verb',
          explanation: 'Can ƒë∆∞·ª£c d√πng ƒë·ªÉ di·ªÖn t·∫£ kh·∫£ nƒÉng v√† xin ph√©p. Trong c√¢u kh·∫≥ng ƒë·ªãnh: S + can + V, trong c√¢u ph·ªß ƒë·ªãnh: S + cannot/can\'t + V, trong c√¢u h·ªèi: Can + S + V?',
          example: 'I can speak English fluently. Can you help me with this problem?'
        },
        {
          rule: 'Could - Kh·∫£ nƒÉng qu√° kh·ª© v√† Y√™u c·∫ßu l·ªãch s·ª±',
          structure: 'Subject + could + base verb',
          explanation: 'Could l√† qu√° kh·ª© c·ªßa can, d√πng ƒë·ªÉ di·ªÖn t·∫£ kh·∫£ nƒÉng trong qu√° kh·ª© ho·∫∑c ƒë∆∞a ra l·ªùi ƒë·ªÅ ngh·ªã l·ªãch s·ª±.',
          example: 'When I was young, I could run very fast. Could you please open the window?'
        },
        {
          rule: 'Should - L·ªùi khuy√™n v√† Nghƒ©a v·ª•',
          structure: 'Subject + should + base verb',
          explanation: 'Should ƒë∆∞·ª£c d√πng ƒë·ªÉ ƒë∆∞a ra l·ªùi khuy√™n ho·∫∑c di·ªÖn t·∫£ nghƒ©a v·ª•, ƒëi·ªÅu n√™n l√†m.',
          example: 'You should study harder for the exam. We should arrive early for the meeting.'
        },
        {
          rule: 'Must - B·∫Øt bu·ªôc m·∫°nh v√† Ch·∫Øc ch·∫Øn',
          structure: 'Subject + must + base verb',
          explanation: 'Must di·ªÖn t·∫£ s·ª± b·∫Øt bu·ªôc m·∫°nh m·∫Ω ho·∫∑c s·ª± ch·∫Øc ch·∫Øn cao v·ªÅ m·ªôt ƒëi·ªÅu g√¨ ƒë√≥.',
          example: 'You must wear a helmet when riding a motorcycle. She must be tired after the long journey.'
        },
        {
          rule: 'May - Xin ph√©p v√† Kh·∫£ nƒÉng',
          structure: 'Subject + may + base verb',
          explanation: 'May ƒë∆∞·ª£c d√πng ƒë·ªÉ xin ph√©p m·ªôt c√°ch l·ªãch s·ª± ho·∫∑c di·ªÖn t·∫£ kh·∫£ nƒÉng c√≥ th·ªÉ x·∫£y ra.',
          example: 'May I come in? It may rain this afternoon.'
        },
        {
          rule: 'Might - Kh·∫£ nƒÉng th·∫•p',
          structure: 'Subject + might + base verb',
          explanation: 'Might di·ªÖn t·∫£ kh·∫£ nƒÉng th·∫•p h∆°n may, th∆∞·ªùng d√πng ƒë·ªÉ n√≥i v·ªÅ ƒëi·ªÅu kh√¥ng ch·∫Øc ch·∫Øn.',
          example: 'I might go to the party tonight. He might be late because of traffic.'
        },
        {
          rule: 'Will - T∆∞∆°ng lai v√† Quy·∫øt ƒë·ªãnh',
          structure: 'Subject + will + base verb',
          explanation: 'Will ƒë∆∞·ª£c d√πng ƒë·ªÉ di·ªÖn t·∫£ t∆∞∆°ng lai, quy·∫øt ƒë·ªãnh t·ª©c th·ªùi ho·∫∑c l·ªùi h·ª©a.',
          example: 'I will help you with your homework. It will be sunny tomorrow.'
        },
        {
          rule: 'Would - ƒêi·ªÅu ki·ªán v√† L·ªãch s·ª±',
          structure: 'Subject + would + base verb',
          explanation: 'Would d√πng trong c√¢u ƒëi·ªÅu ki·ªán, th√≥i quen qu√° kh·ª© ho·∫∑c y√™u c·∫ßu l·ªãch s·ª±.',
          example: 'I would travel around the world if I had money. Would you like some coffee?'
        }
      ],
      'Present Simple': [
        {
          rule: 'C√¢u kh·∫≥ng ƒë·ªãnh',
          structure: 'Subject + V(s/es) + Object',
          explanation: 'Th√¨ hi·ªán t·∫°i ƒë∆°n d√πng ƒë·ªÉ di·ªÖn t·∫£ h√†nh ƒë·ªông th∆∞·ªùng xuy√™n, s·ª± th·∫≠t hi·ªÉn nhi√™n. V·ªõi ng√¥i th·ª© 3 s·ªë √≠t (he, she, it) th√™m s/es v√†o ƒë·ªông t·ª´.',
          example: 'I work in an office. She works at a hospital. They play football every Sunday.'
        },
        {
          rule: 'C√¢u ph·ªß ƒë·ªãnh',
          structure: 'Subject + do/does + not + base verb',
          explanation: 'C√¢u ph·ªß ƒë·ªãnh s·ª≠ d·ª•ng do not (don\'t) v·ªõi I, you, we, they v√† does not (doesn\'t) v·ªõi he, she, it.',
          example: 'I don\'t like coffee. He doesn\'t speak French. We don\'t have time.'
        },
        {
          rule: 'C√¢u h·ªèi Yes/No',
          structure: 'Do/Does + Subject + base verb?',
          explanation: 'C√¢u h·ªèi yes/no s·ª≠ d·ª•ng do v·ªõi I, you, we, they v√† does v·ªõi he, she, it.',
          example: 'Do you like music? Does she live in London? Do they have children?'
        },
        {
          rule: 'C√¢u h·ªèi WH-',
          structure: 'WH- + do/does + Subject + base verb?',
          explanation: 'C√¢u h·ªèi th√¥ng tin s·ª≠ d·ª•ng t·ª´ h·ªèi (what, where, when, why, how) + do/does.',
          example: 'What do you do for work? Where does he live? When do they start school?'
        },
        {
          rule: 'D·∫•u hi·ªáu nh·∫≠n bi·∫øt',
          structure: 'Adverbs of frequency + Present Simple',
          explanation: 'Th∆∞·ªùng ƒëi v·ªõi c√°c tr·∫°ng t·ª´ ch·ªâ t·∫ßn su·∫•t: always, usually, often, sometimes, never.',
          example: 'I always brush my teeth before bed. She usually arrives on time.'
        }
      ],
      'Past Simple': [
        {
          rule: 'ƒê·ªông t·ª´ c√≥ quy t·∫Øc',
          structure: 'Subject + V-ed + Object',
          explanation: 'ƒê·ªông t·ª´ c√≥ quy t·∫Øc th√™m -ed v√†o cu·ªëi ƒë·ªÉ t·∫°o th√†nh qu√° kh·ª© ƒë∆°n. N·∫øu ƒë·ªông t·ª´ k·∫øt th√∫c b·∫±ng -e ch·ªâ th√™m -d.',
          example: 'I walked to school yesterday. They visited their grandparents last week. She lived in Paris for two years.'
        },
        {
          rule: 'ƒê·ªông t·ª´ b·∫•t quy t·∫Øc',
          structure: 'Subject + V2 (irregular) + Object',
          explanation: 'ƒê·ªông t·ª´ b·∫•t quy t·∫Øc c√≥ d·∫°ng qu√° kh·ª© ri√™ng c·∫ßn h·ªçc thu·ªôc l√≤ng. V√≠ d·ª•: go-went, see-saw, buy-bought.',
          example: 'I went to the market this morning. She bought a new dress yesterday. We saw a good movie last night.'
        },
        {
          rule: 'C√¢u ph·ªß ƒë·ªãnh v√† c√¢u h·ªèi',
          structure: 'Subject + did not + base verb / Did + Subject + base verb?',
          explanation: 'C√¢u ph·ªß ƒë·ªãnh v√† c√¢u h·ªèi s·ª≠ d·ª•ng did v·ªõi t·∫•t c·∫£ c√°c ng√¥i, ƒë·ªông t·ª´ ch√≠nh tr·ªü v·ªÅ d·∫°ng nguy√™n m·∫´u.',
          example: 'I didn\'t go to work yesterday. Did you finish your homework? She didn\'t understand the lesson.'
        },
        {
          rule: 'D·∫•u hi·ªáu nh·∫≠n bi·∫øt',
          structure: 'Past time expressions + Past Simple',
          explanation: 'Th∆∞·ªùng ƒëi v·ªõi c√°c c·ª•m t·ª´ ch·ªâ th·ªùi gian qu√° kh·ª©: yesterday, last week, ago, in 1990.',
          example: 'I met him three years ago. Last summer, we traveled to Japan.'
        }
      ],
      'Present Perfect': [
        {
          rule: 'C·∫•u tr√∫c c∆° b·∫£n',
          structure: 'Subject + have/has + past participle',
          explanation: 'Th√¨ hi·ªán t·∫°i ho√†n th√†nh di·ªÖn t·∫£ h√†nh ƒë·ªông ƒë√£ x·∫£y ra trong qu√° kh·ª© nh∆∞ng c√≥ li√™n quan ƒë·∫øn hi·ªán t·∫°i.',
          example: 'I have lived here for 5 years. She has just finished her work.'
        },
        {
          rule: 'S·ª≠ d·ª•ng v·ªõi "for" v√† "since"',
          structure: 'Subject + have/has + V3 + for/since + time',
          explanation: 'For + kho·∫£ng th·ªùi gian (for 2 hours), since + m·ªëc th·ªùi gian c·ª• th·ªÉ (since 2010).',
          example: 'They have been married for 10 years. I have known him since we were children.'
        },
        {
          rule: 'V·ªõi "already", "yet", "just"',
          structure: 'Subject + have/has + already/just + V3 / haven\'t + V3 + yet',
          explanation: 'Already v√† just ƒë·∫∑t gi·ªØa have/has v√† V3. Yet d√πng trong c√¢u ph·ªß ƒë·ªãnh v√† c√¢u h·ªèi, ƒë·∫∑t cu·ªëi c√¢u.',
          example: 'I have already done my homework. Have you finished yet? She has just arrived.'
        }
      ],
      'Present Continuous': [
        {
          rule: 'C·∫•u tr√∫c hi·ªán t·∫°i ti·∫øp di·ªÖn',
          structure: 'Subject + am/is/are + V-ing',
          explanation: 'Th√¨ hi·ªán t·∫°i ti·∫øp di·ªÖn di·ªÖn t·∫£ h√†nh ƒë·ªông ƒëang x·∫£y ra t·∫°i th·ªùi ƒëi·ªÉm n√≥i.',
          example: 'I am reading a book now. She is cooking dinner. They are playing football.'
        },
        {
          rule: 'C√¢u ph·ªß ƒë·ªãnh v√† c√¢u h·ªèi',
          structure: 'Subject + am/is/are + not + V-ing / Am/Is/Are + Subject + V-ing?',
          explanation: 'Th√™m not sau am/is/are ƒë·ªÉ t·∫°o c√¢u ph·ªß ƒë·ªãnh. ƒê·∫£o am/is/are l√™n ƒë·∫ßu ƒë·ªÉ t·∫°o c√¢u h·ªèi.',
          example: 'I am not working today. Is she coming to the party? Are you listening to me?'
        }
      ]
    };

    // Get grammar rules for the topic, or create generic ones
    let selectedRules = grammarDatabase[topic as keyof typeof grammarDatabase] || this.generateGenericGrammar(topic, level);
    
    // Limit to requested count and add variety
    const finalRules = [];
    for (let i = 0; i < count && i < selectedRules.length; i++) {
      finalRules.push(selectedRules[i]);
    }
    
    // If we need more rules, generate additional ones
    while (finalRules.length < count) {
      const additionalRules = this.generateGenericGrammar(topic, level);
      for (let i = 0; i < additionalRules.length && finalRules.length < count; i++) {
        finalRules.push(additionalRules[i]);
      }
    }

    return finalRules.map((rule, index) => ({
      id: `grammar-${Date.now()}-${index}`,
      ...rule
    }));
  }

  private generateGenericGrammar(topic: string, level: string): Array<{rule: string, structure: string, explanation: string, example: string}> {
    const levelBasedGrammar = {
      'A1': [
        {
          rule: `${topic} - C·∫•u tr√∫c c∆° b·∫£n`,
          structure: 'Subject + Verb + Object',
          explanation: `C·∫•u tr√∫c c∆° b·∫£n c·ªßa ${topic} ·ªü tr√¨nh ƒë·ªô s∆° c·∫•p. Bao g·ªìm ch·ªß ng·ªØ, ƒë·ªông t·ª´ v√† t√¢n ng·ªØ trong c√¢u ƒë∆°n gi·∫£n.`,
          example: `This is a basic example of how we use ${topic} in everyday English.`
        },
        {
          rule: `${topic} - M·∫´u c√¢u ƒë∆°n gi·∫£n`,
          structure: 'Simple sentence pattern',
          explanation: `M·∫´u c√¢u ƒë∆°n gi·∫£n cho ${topic}, ph√π h·ª£p v·ªõi ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu h·ªçc ti·∫øng Anh.`,
          example: `Here is how beginners can use ${topic} in simple sentences.`
        }
      ],
      'A2': [
        {
          rule: `${topic} - Quy t·∫Øc s·ª≠ d·ª•ng`,
          structure: 'Extended sentence structure',
          explanation: `Quy t·∫Øc s·ª≠ d·ª•ng ${topic} ·ªü tr√¨nh ƒë·ªô c∆° b·∫£n, v·ªõi nhi·ªÅu bi·∫øn th·ªÉ v√† ng·ªØ c·∫£nh kh√°c nhau.`,
          example: `We can use ${topic} in various ways to express different meanings and ideas.`
        },
        {
          rule: `${topic} - M·∫´u th∆∞·ªùng g·∫∑p`,
          structure: 'Common usage patterns',
          explanation: `C√°c m·∫´u th∆∞·ªùng g·∫∑p c·ªßa ${topic} trong giao ti·∫øp h√†ng ng√†y v√† vƒÉn vi·∫øt ƒë∆°n gi·∫£n.`,
          example: `These are common examples of ${topic} that you hear in everyday conversation.`
        }
      ],
      'B1': [
        {
          rule: `${topic} - C·∫•u tr√∫c n√¢ng cao`,
          structure: 'Intermediate sentence patterns',
          explanation: `C·∫•u tr√∫c trung c·∫•p c·ªßa ${topic} v·ªõi c√°c quy t·∫Øc ph·ª©c t·∫°p h∆°n v√† nhi·ªÅu ·ª©ng d·ª•ng th·ª±c t·∫ø.`,
          example: `At intermediate level, students learn to use ${topic} in more sophisticated ways.`
        }
      ],
      'B2': [
        {
          rule: `${topic} - ·ª®ng d·ª•ng ph·ª©c t·∫°p`,
          structure: 'Advanced grammatical structures',
          explanation: `·ª®ng d·ª•ng ph·ª©c t·∫°p c·ªßa ${topic} trong vƒÉn phong trang tr·ªçng v√† giao ti·∫øp chuy√™n nghi·ªáp.`,
          example: `Advanced learners can use ${topic} effectively in formal and academic contexts.`
        }
      ],
      'C1': [
        {
          rule: `${topic} - S·ª≠ d·ª•ng tinh t·∫ø`,
          structure: 'High-level grammatical patterns',
          explanation: `C√°ch s·ª≠ d·ª•ng tinh t·∫ø c·ªßa ${topic} ·ªü tr√¨nh ƒë·ªô cao, th·ªÉ hi·ªán s·ª± th√†nh th·∫°o trong ng√¥n ng·ªØ.`,
          example: `Proficient speakers demonstrate mastery of ${topic} through nuanced and precise usage.`
        }
      ],
      'C2': [
        {
          rule: `${topic} - Tr√¨nh ƒë·ªô b·∫£n ng·ªØ`,
          structure: 'Native-like usage patterns',
          explanation: `S·ª≠ d·ª•ng ${topic} ·ªü tr√¨nh ƒë·ªô b·∫£n ng·ªØ v·ªõi c√°c s·∫Øc th√°i tinh t·∫ø v√† bi·∫øn th·ªÉ phong c√°ch.`,
          example: `Native-like proficiency in ${topic} includes subtle distinctions and stylistic variations.`
        }
      ]
    };

    return levelBasedGrammar[level as keyof typeof levelBasedGrammar] || levelBasedGrammar['A1'];
  }
}

export const aiCourseGeneratorService = new AICourseGeneratorService();
export type { AIGenerationConfig, GeneratedCourse };
